// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: documentservice/v1/document.proto

package documentservicev1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/Kimoto-Norihiro/file-uploader/api/documentservice/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// DocumentServiceName is the fully-qualified name of the DocumentService service.
	DocumentServiceName = "documentservice.v1.DocumentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DocumentServiceCreateDocumentProcedure is the fully-qualified name of the DocumentService's
	// CreateDocument RPC.
	DocumentServiceCreateDocumentProcedure = "/documentservice.v1.DocumentService/CreateDocument"
	// DocumentServiceGetDocumentProcedure is the fully-qualified name of the DocumentService's
	// GetDocument RPC.
	DocumentServiceGetDocumentProcedure = "/documentservice.v1.DocumentService/GetDocument"
)

// DocumentServiceClient is a client for the documentservice.v1.DocumentService service.
type DocumentServiceClient interface {
	CreateDocument(context.Context, *connect_go.Request[v1.CreateDocumentRequest]) (*connect_go.Response[v1.CreateDocumentResponse], error)
	GetDocument(context.Context, *connect_go.Request[v1.GetDocumentRequest]) (*connect_go.Response[v1.GetDocumentResponse], error)
}

// NewDocumentServiceClient constructs a client for the documentservice.v1.DocumentService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDocumentServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DocumentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &documentServiceClient{
		createDocument: connect_go.NewClient[v1.CreateDocumentRequest, v1.CreateDocumentResponse](
			httpClient,
			baseURL+DocumentServiceCreateDocumentProcedure,
			opts...,
		),
		getDocument: connect_go.NewClient[v1.GetDocumentRequest, v1.GetDocumentResponse](
			httpClient,
			baseURL+DocumentServiceGetDocumentProcedure,
			opts...,
		),
	}
}

// documentServiceClient implements DocumentServiceClient.
type documentServiceClient struct {
	createDocument *connect_go.Client[v1.CreateDocumentRequest, v1.CreateDocumentResponse]
	getDocument    *connect_go.Client[v1.GetDocumentRequest, v1.GetDocumentResponse]
}

// CreateDocument calls documentservice.v1.DocumentService.CreateDocument.
func (c *documentServiceClient) CreateDocument(ctx context.Context, req *connect_go.Request[v1.CreateDocumentRequest]) (*connect_go.Response[v1.CreateDocumentResponse], error) {
	return c.createDocument.CallUnary(ctx, req)
}

// GetDocument calls documentservice.v1.DocumentService.GetDocument.
func (c *documentServiceClient) GetDocument(ctx context.Context, req *connect_go.Request[v1.GetDocumentRequest]) (*connect_go.Response[v1.GetDocumentResponse], error) {
	return c.getDocument.CallUnary(ctx, req)
}

// DocumentServiceHandler is an implementation of the documentservice.v1.DocumentService service.
type DocumentServiceHandler interface {
	CreateDocument(context.Context, *connect_go.Request[v1.CreateDocumentRequest]) (*connect_go.Response[v1.CreateDocumentResponse], error)
	GetDocument(context.Context, *connect_go.Request[v1.GetDocumentRequest]) (*connect_go.Response[v1.GetDocumentResponse], error)
}

// NewDocumentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDocumentServiceHandler(svc DocumentServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	documentServiceCreateDocumentHandler := connect_go.NewUnaryHandler(
		DocumentServiceCreateDocumentProcedure,
		svc.CreateDocument,
		opts...,
	)
	documentServiceGetDocumentHandler := connect_go.NewUnaryHandler(
		DocumentServiceGetDocumentProcedure,
		svc.GetDocument,
		opts...,
	)
	return "/documentservice.v1.DocumentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DocumentServiceCreateDocumentProcedure:
			documentServiceCreateDocumentHandler.ServeHTTP(w, r)
		case DocumentServiceGetDocumentProcedure:
			documentServiceGetDocumentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDocumentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDocumentServiceHandler struct{}

func (UnimplementedDocumentServiceHandler) CreateDocument(context.Context, *connect_go.Request[v1.CreateDocumentRequest]) (*connect_go.Response[v1.CreateDocumentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("documentservice.v1.DocumentService.CreateDocument is not implemented"))
}

func (UnimplementedDocumentServiceHandler) GetDocument(context.Context, *connect_go.Request[v1.GetDocumentRequest]) (*connect_go.Response[v1.GetDocumentResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("documentservice.v1.DocumentService.GetDocument is not implemented"))
}
